record(bo, "$(P)DISABLE"){
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

record(bo, "$(P)SIM"){
    field(DESC, "Recsim mode")
    field(PINI, "YES")
    field(VAL, "$(RECSIM=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "Normal")
    field(ONAM, "Recsim")
}

record(ao, "$(P)VOLT:FULLSCALE") {
    field(DESC, "Full-scale voltage")
    field(VAL, "$(VOLT_FULLSCALE)")
    field(PINI, "YES")
    field(EGU, "V")
    field(ASG, "READONLY")
    info(archive, "VAL")
}

record(ao, "$(P)CURR:FULLSCALE") {
    field(DESC, "Full-scale current")
    field(VAL, "$(CURR_FULLSCALE)")
    field(PINI, "YES")
    field(EGU, "A")
    field(ASG, "READONLY")
    info(archive, "VAL")
}

record(bo, "$(P)POWER:SP") {
    field(DESC, "PSU power setpoint")
    field(ZNAM, "Off")
    field(ONAM, "On")
	field(FLNK, "$(P)POWER:SP:PROC_CNT")  # Will eventually cause statemachine to propagate this to POWER:SP:_RAW
	field(UDFS, "NO_ALARM")
}

record(bo, "$(P)POWER:SP:_RAW") {
    field(DESC, "PSU power setpoint")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(DTYP, "stream")
    field(OUT, "@transtechnik.proto power($(PS_ADDR)) $(PORT)")
    field(SDIS, "$(P)DISABLE")
}

record(calc, "$(P)POWER:_CALC") {
    # Invert power so that we get a logical 1=On, 0=Off
    field(INPA, "$(P)STATUS.B1F CP MSS")
    field(CALC, "!A")
}

record(bi, "$(P)POWER") {
    field(DESC, "PSU power readback")
    field(INP, "$(P)POWER:_CALC CP MSS")
    field(ZNAM, "Off")
    field(ONAM, "On")
    info(archive, "VAL")
    info(interest, "HIGH")
}

record(bo, "$(P)RESET") {
    field(DESC, "Reset interlocks")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
	field(UDFS, "NO_ALARM")
	field(FLNK, "$(P)RESET:PROC_CNT")  # Will eventually cause statemachine to propagate this to RESET:RAW
}
alias("$(P)RESET", "$(P)RESET:SP")

record(bo, "$(P)RESET:_RAW") {
    field(DESC, "Reset interlocks")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(DTYP, "stream")
    field(OUT, "@transtechnik.proto reset($(PS_ADDR)) $(PORT)")
    field(SDIS, "$(P)DISABLE")
}

record(longin, "$(P)VOLT:RAW") {
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP, "@transtechnik.proto get_volt($(PS_ADDR)) $(PORT)")
    field(EGU, "ppm")
    field(SDIS, "$(P)DISABLE")
    info(archive, "VAL")
}

record(calc, "$(P)VOLT:CALC") {
    field(DESC, "Voltage Calc")
    field(INPA, "$(P)VOLT:RAW CP MSS")
    field(INPB, "$(P)VOLT:FULLSCALE CP MSS")
    field(CALC, "(A/100000)*B")
    field(ASG, "READONLY")
    field(EGU, "V")
	field(PREC, "3")
}

record(ai, "$(P)VOLT") {
    field(DESC, "Voltage")
    field(INP, "$(P)VOLT:CALC CP MSS")
    field(EGU, "V")
	field(PREC, "3")
    field(HIGH, 0)
    field(LOW, 0)
    field(HSV, "$(LIMIT_ALARM)")
    field(LSV, "$(LIMIT_ALARM)")
    info(interest, "HIGH")
    info(archive, "VAL")
}

record(longin, "$(P)CURR:RAW") {
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP, "@transtechnik.proto get_curr($(PS_ADDR)) $(PORT)")
    field(EGU, "pp100k")
    field(SDIS, "$(P)DISABLE")
    info(archive, "VAL")
}

record(calc, "$(P)CURR:CALC") {
    field(DESC, "Current Calc")
    field(INPA, "$(P)CURR:RAW CP MSS")
    field(INPB, "$(P)CURR:FULLSCALE CP MSS")
    field(CALC, "(A/100000)*B")
    field(ASG, "READONLY")
    field(EGU, "A")
	field(PREC, "3")
}

record(ai, "$(P)CURR") {
    field(DESC, "Current")
    field(INP, "$(P)CURR:CALC CP MSS")
    field(EGU, "A")
	field(PREC, "3")
    field(HIGH, 0)
    field(LOW, 0)
    field(HSV, "$(LIMIT_ALARM)")
    field(LSV, "$(LIMIT_ALARM)")
    info(interest, "HIGH")
    info(archive, "VAL")
}

record(longin, "$(P)CURR:SP:RBV:RAW") {
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP, "@transtechnik.proto get_curr_sp($(PS_ADDR)) $(PORT)")
    field(EGU, "pp100k")
    field(SDIS, "$(P)DISABLE")
    info(archive, "VAL")
}

record(calc, "$(P)CURR:SP:RBV") {
    field(DESC, "Current setpoint readback")
    field(INPA, "$(P)CURR:RAW CP MSS")
    field(INPB, "$(P)CURR:FULLSCALE CP MSS")
    field(CALC, "(A/100000)*B")
    field(ASG, "READONLY")
    field(EGU, "A")
	field(PREC, "3")
    info(interest, "HIGH")
    info(archive, "VAL")
}

record(ao, "$(P)CURR:SP") {
    field(DESC, "Current setpoint")
    field(EGU, "A")
	field(PREC, "3")
    field(FLNK, "$(P)CURR:SP:_CALC")
    info(archive, "VAL")
	field(UDFS, "NO_ALARM")
}

record(calcout, "$(P)CURR:SP:_CALC") {
    field(INPA, "$(P)CURR:SP")
    field(INPB, "$(P)CURR:FULLSCALE")
    field(CALC, "(A/B)*1000000")
	field(FLNK, "$(P)CURR:SP:PROC_CNT")  # Will eventually cause state-machine to propagate this to CURR:SP:_RAW
}

record(longout, "$(P)CURR:SP:_RAW") {
    field(DTYP, "stream")
    field(OUT, "@transtechnik.proto set_curr($(PS_ADDR)) $(PORT)")
    field(EGU, "ppm")
    field(SDIS, "$(P)DISABLE")
}

record(mbbiDirect, "$(P)STATUS") {
    field(DESC, "Power supply raw status bits")
    field(SCAN, "1 second")
	field(DTYP, "stream")
	field(INP, "@transtechnik.proto get_stat($(PS_ADDR)) $(PORT)")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)MODE") {
    field(DESC, "Local/remote mode")
    field(INP, "$(P)STATUS.BF CP MSS")
    field(ZNAM, "Local")
    field(ONAM, "Remote")
    info(archive, "VAL")
    info(interest, "HIGH")
}

record(mbbo, "$(P)STATEMACHINE:STATE") {
    field(DESC, "Statemachine status")
    field(ZRST, "initializing")
    field(ONST, "idle")
    field(TWST, "set_current")
    field(THST, "set_power")
    field(FRST, "send_reset")
    field(FVST, "wait_for_inrush")
}

record(ao, "$(P)STATEMACHINE:INRUSH_WAIT") {
    field(DESC, "Amount of time to wait for inrush")
    field(EGU, "s")
    field(PREC, "1")
    field(VAL, "20")
	field(PINI, "YES")
}

record(calc, "$(P)CURR:SP:PROC_CNT") {
    # Increments each time CURR:SP is written to. This then causes the state
	# machine to know that a new value should be sent to hardware at the next
	# opportunity.
    field(CALC, "VAL+1")
}

record(calc, "$(P)RESET:PROC_CNT") {
    # Increments each time RESET is written to. This then causes the state
	# machine to know that a new value should be sent to hardware at the next
	# opportunity.
    field(CALC, "VAL+1")
}

record(calc, "$(P)POWER:SP:PROC_CNT") {
    # Increments each time POWER:SP is written to. This then causes the state
	# machine to know that a new value should be sent to hardware at the next
	# opportunity.
    field(CALC, "VAL+1")
}

record(calc, "$(P)ILK") {
    field(DESC, "ILK SUMMARY")
    field(CALC, "A||B||C||D||E||F||G||H||I||J||K||L")
    field(INPA, "$(P)ILK:MAGNET_TEMP CP MSS")
    field(INPB, "$(P)ILK:MAGNET_WATER CP MSS")
    field(INPC, "$(P)ILK:BPS1 CP MSS")
    field(INPD, "$(P)ILK:BPS2 CP MSS")
    field(INPE, "$(P)ILK:PPS1 CP MSS")
    field(INPF, "$(P)ILK:PPS2 CP MSS")
    field(INPG, "$(P)ILK:SPARE1 CP MSS")
    field(INPH, "$(P)ILK:SPARE2 CP MSS")
    field(INPI, "$(P)ILK:EM_STOP CP MSS")
    field(INPJ, "$(P)ILK:DOOR CP MSS")
    field(INPK, "$(P)ILK:CONTROL_SWITCH CP MSS")
    field(INPL, "$(P)ILK:SELF_TEST CP MSS")
}

record(calc, "$(P)ILK:OUTPUT"){
    field(DESC, "OUTPUT ILK SUMMARY")
    field(CALC, "A||B||C")
    field(INPA, "$(P)OUTPUT:OVERVOLTAGE CP MSS")
    field(INPB, "$(P)OUTPUT:OVERCURRENT CP MSS")
    field(INPC, "$(P)OUTPUT:UNBALANCED CP MSS")
}

record(calc, "$(P)ILK:SUMMARY") {
    field(DESC, "ALL INTERLOCKS SUMMARY")
    field(CALC, "A||B")
    field(INPA, "$(P)ILK CP MSS")
    field(INPB, "$(P)ILK:OUTPUT CP MSS")
    info(interest, "MEDIUM")
}

record(calc, "$(P)ERROR:SUMMARY") {
    field(DESC, "ERROR SUMMARY")
    field(CALC, "a||b||C||D||E||F||G")
    field(INPA, "$(P)PM1_ERR CP MSS")
    field(INPB, "$(P)PM2_ERR CP MSS")
    field(INPC, "$(P)PM3_ERR CP MSS")
    field(INPD, "$(P)PM4_ERR CP MSS")
    field(INPE, "$(P)PM5_ERR CP MSS")
    field(INPF, "$(P)IN_ERR CP MSS")
    field(INPG, "$(P)RU_ERR CP MSS")
    info(interest, "HIGH")
}

record(calc, "$(P)WARNING:SUMMARY") {
    field(DESC, "WARNING SUMMARY")
    field(CALC, "a||b||C||D||E||F||G")
    field(INPA, "$(P)PM1_WARN CP MSS")
    field(INPB, "$(P)PM2_WARN CP MSS")
    field(INPC, "$(P)PM3_WARN CP MSS")
    field(INPD, "$(P)PM4_WARN CP MSS")
    field(INPE, "$(P)PM5_WARN CP MSS")
    field(INPF, "$(P)IN_WARN CP MSS")
    field(INPG, "$(P)RU_WARN CP MSS")
    info(interest, "HIGH")
}

record(calc, "$(P)LIMIT") {
    field(DESC, "LIMIT HIT")
    field(CALC, "A?(B?3:1):(B?2:0)")
    field(INPA, "$(P)VOLT.SEVR CP MSS")
    field(INPB, "$(P)CURR.SEVR CP MSS")
}

record(calc, "$(P)ALARM:SUMMARY"){
    field(CALC, "C?(A?7:5):(B?(A?6:4):A)")
    field(INPA, "$(P)LIMIT CP MSS")
    field(INPB, "$(P)WARNING:SUMMARY CP MSS")
    field(INPC, "$(P)ERROR:SUMMARY CP MSS")
}

record(mbbi, "$(P)ALARM:ENUM") {
    field(INP, "$(P)ALARM:SUMMARY CP MSI")
    field(DESC, "Display Limit")
    field(ZRST, "No")        
    field(ZRVL, "0")
    field(ZRSV, "NO ALARM")  
    field(ONST, "VOLT LIMIT")         
    field(ONVL, "1")
    field(ONSV, "$(LIMIT_ALARM)")
    field(TWST, "CURR LIMIT")         
    field(TWVL, "2")
    field(TWSV, "$(LIMIT_ALARM)")
    field(THST, "BOTH LIMITS")       
    field(THVL, "3")
    field(THSV, "$(LIMIT_ALARM)")
    field(FRST, "WARNING")       
    field(FRVL, "4")
    field(FRSV, "MINOR")
    field(FVST, "ERROR")       
    field(FVVL, "5")
    field(FVSV, "MAJOR")
    field(SXST, "LIMIT AND WARNING")       
    field(SXVL, "6")
    field(SXSV, "MINOR")
    field(SVST, "LIMIT AND ERROR")       
    field(SVVL, "7")
    field(SVSV, "MAJOR")
}
